@{
    ViewData["Title"] = "Home Page";
}

@section Styles{
    <link href="~/lib/fullcalendar/lib/main.css" rel="stylesheet" />
    <link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.39.0/css/tempusdominus-bootstrap-4.min.css" integrity="sha512-3JRrEUwaCkFUBLK1N8HehwQgu8e23jTH4np5NHOmQOobuC4ROQxFwFgBLTnhcnQRMs84muMh0PnnwXlPq5MGjg==" crossorigin="anonymous" />

}

<!-- Save Event Modal -->
<div class="modal fade" id="saveModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel" style="font-size: larger;font-weight: bold">
                    Etkinlik Ekleme/Güncelleme
                </h5>
            </div>
            <div class="modal-body">
                <form>
                    <input hidden id="eventId" />
                    <div class="form-group">
                        <label class="form-control-label" style="font-weight:bold">Etkinlik Adı </label>
                        <input id="inputTitle" type="text" class="form-control" />
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label class="form-control-label" style="font-weight:bold">Başlangıç Tarihi </label>
                            <div class="input-group date" id="datetimepicker1" data-target-input="nearest">
                                <input id="inputStartDate" type="text" class="form-control datetimepicker-input" data-target="#datetimepicker1" />
                                <div class="input-group-append" data-target="#datetimepicker1" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <label class="form-control-label" style="font-weight:bold">Bitiş Tarihi </label>
                            <div class="input-group date" id="datetimepicker2" data-target-input="nearest">
                                <input id="inputEndDate" type="text" class="form-control datetimepicker-input" data-target="#datetimepicker2" />
                                <div class="input-group-append" data-target="#datetimepicker2" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-control-label" style="font-weight:bold">Açıklama </label>
                        <textarea id="inputDescription" type="text" class="form-control">Açıklama Giriniz...</textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                <button id="btnSave" type="button" class="btn btn-primary">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Detail Event Modal -->
<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel" style="font-size: larger;font-weight: bold">
                    Etkinlik Detayları
                </h5>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label class="form-control-label" style="font-weight:bold">Etkinlik Adı </label>
                        <input disabled id="inputTitleDetail" type="text" class="form-control" />
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label class="form-control-label" style="font-weight:bold">Başlangıç Tarihi </label>
                            <div class="input-group date" id="datetimepicker1" data-target-input="nearest">
                                <input disabled id="inputStartDateDetail" type="text" class="form-control datetimepicker-input" data-target="#datetimepicker1" />
                                <div class="input-group-append" data-target="#datetimepicker1" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <label class="form-control-label" style="font-weight:bold">Bitiş Tarihi </label>
                            <div class="input-group date" id="datetimepicker2" data-target-input="nearest">
                                <input disabled id="inputEndDateDetail" type="text" class="form-control datetimepicker-input" data-target="#datetimepicker2" />
                                <div class="input-group-append" data-target="#datetimepicker2" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-control-label" style="font-weight:bold">Açıklama </label>
                        <textarea disabled id="inputDescriptionDetail" type="text" class="form-control">Açıklama Giriniz...</textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="btnDelete" class="btn btn-outline-danger">Sil</button>
                <button id="btnUpdate" type="button" class="btn btn-outline-primary">Güncelle</button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-2">
        <div id="otherEvents" style=" position: fixed; z-index: 2;  width: 150px; padding: 0 10px; border: 1px solid #ccc; background: #eee;">
            <p><strong>Sürüklenebilir Etkinlikler</strong></p>
            <div class='fc-event ' style=" border: 1px solid #5c7fa7;
        background: #5c7fa7
">
                <div class='fc-event-main' id="isValid">1.Etkinlik</div>
            </div>
            <div class='fc-event'>
                <div class='fc-event-main' id="isNotValid">2.Etkinlik</div>
            </div>
        </div>
    </div>
    <div class="col-md-10">
        <div id="calendar"></div>

    </div>
</div>


@section Scripts{

    <script src="~/lib/fullcalendar/lib/main.js"></script>
    <script src="~/lib/fullcalendar/lib/locales/tr.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.39.0/js/tempusdominus-bootstrap-4.min.js" integrity="sha512-k6/Bkb8Fxf/c1Tkyl39yJwcOZ1P4cRrJu77p83zJjN2Z55prbFHxPs9vN7q3l3+tSMGPDdoH51AEU8Vgo1cgAA==" crossorigin="anonymous"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            let draggableEl = document.getElementById('otherEvents');
            var selectedEvent = null;
            var events = [];

            var Draggable = FullCalendar.Draggable;
            new Draggable(draggableEl, {
                itemSelector: '.fc-event',
                eventData: function (eventEl) {
                    return {
                        title: eventEl.innerText,
                        duration: '01:30',
                    };
                },
            });

            var calendar = new FullCalendar.Calendar(calendarEl, {
                themeSystem: 'bootstrap',
                locale: 'tr',
                timeZone: 'local',//Her tarayıcıda etkinlik saat diliminin aynı olması. default olarak local gelir
                bootstrapFontAwesome: {
                    dayGridMonth: 'calendar',
                    prev: 'fa-angle-double-left',
                    next: 'fa-angle-double-right',
                    listWeek: 'fa-list',
                },
                initialView: 'dayGridMonth',

                headerToolbar: {
                    left: 'prev next today',
                    center: 'title',
                    right: 'dayGridMonth timeGridWeek listWeek'
                    //listDay, listWeek,listMonth,listYear
                },
                footerToolbar: {
                    left: 'prevYear',
                    right: 'nextYear'
                },
                scrollTime: 'timeGridHour',
                snapDuration: '00:15:00',//event sürüklemesinde/güncelleme kaydırma zaman dilimi aralığı. default slotDuration özelliğine eşit yani  30 dk

                //minTime:'08:00:00',
                //maxTime:'20:00:00',
                slotDuration: '00:30:00',//Zaman çizelgesi saat dilimi aralığı
                slotLabelInterval: '00:15:00',
                slotLabelFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                },
                fixedWeekCount: false,//Ay görünümünde hafta sayısını 6'ya sabitleme. false sabitlemez
                showNonCurrentDates: true,//Sadece bulunulan ayın günleri görünen ay takvimi. false bir önceki ayın gönlerini göstermez
                contentHeight: 550,
                //aspectRatio:2, // En boy oranı
                allDaySlot: false,//haftalık/gülük görünümlerdeki tüm gün olan eventlar için ayrılmış slotu kapama.
                // firstDay:1,// Pazardan başlayacak şekilde 0.1.2...
                titleFormat: {
                    year: 'numeric',
                    month: 'long',
                    //day: '2-digit',
                },
                //titleRangeSeparator: ' /',


                //Alternatif bul. Gün isimlerinin tam yazılması amaç
                /*columnHeaderFormat: {
                    //month: 'numeric',
                    weekday: 'long',
                    //day: 'numeric',

                },*/
                /*views: { //İsteğe göre belirenen gün sayısına göre filtreleme seçeneği. Burada tercihen 4 günlük
                    timeGridForFourDay: {
                        type: 'timeGrid',
                        //dayCount: 4,
                        duration: {
                            days: 4
                        },
                        buttonText: '4Gün'
                    }
                },*/
                /* buttonText: {
                    today:'Bugün ve Bugün',
                    month: 'Ay ve Ay',
                    week: 'Hafta ve Hafta',
                    day:'Gün ve Gün',
                },*/
                // eventColor: 'teal',//Eventlerin çerçeve ve background renkleri
                eventBackgroundColor: 'teal',
                eventBorderColor: 'teal',
                eventTextColor: 'white',
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    //second: '',
                    //omitZeroMinute: '',//Tam sayılarda 00 olanları göster-gösterme
                    //meridiem:'',//am-pm, 'narrow'--> p,a
                },
                //displayEventTime: true,//Event kutucukları üzerinde saat göster-gösterme
                //displayEventEnd:true,//Event bitiş saati göster-gösterme
                //eventOrder:'title',//start, duration, allDay, title,[],function()--> eventlerin çizelge üzerinde çakışanların görünme yöntemi, sıralanması
                //defaultDate:'2021-07-11',
                events: [],
                //eventRender: function (info) {

                //},
                selectable: true,//Takvim üzerinde seçimleri aktif et
                droppable: true,//Harici sürüklenebilir eventi aktif et
                select: function (selectionInfo) {//Seçimler doğrultusunda çalışacak fonksiyonlar
                    console.log(selectionInfo);
                    selectedEvent = {
                        id: 0,
                        title: "",
                        start: moment(selectionInfo.start),
                        end: moment(selectionInfo.end),
                        description: "",
                    }
                    openAddOrUpdateModal();
                },
                eventClick: function (info) {//Eventler üzerinde tıklandığındaki işlemler
                    selectedEvent = {
                        id: info.event.id,
                        title: info.event.title,
                        start: moment(info.event.start),
                        end: moment(info.event.end),
                        description: info.event.extendedProps.description,
                    },
                        $('#inputStartDateDetail').val(moment(info.event.start).format('DD/MM/YYYY HH:mm')),
                        $('#inputEndDateDetail').val(moment(info.event.end).format('DD/MM/YYYY HH:mm')),
                        $('#inputTitleDetail').val(info.event.title),
                        $('#inputDescriptionDetail').val(info.event.extendedProps.description),
                        $('#detailModal').modal();
                },
                //eventMouseEnter: function (onMouse) {//mouse event üzerine geldiğinde yapılacak işlemler
                //    alert(onMouse.event.start);
                //},
                //eventMouseLeave: function (onLeave) {// mouse event üzerini terkettiği zaman yapılacak işlemler
                //    alert(onLeave.event.id);
                //},
                editable: true,//takvim üzerinde event güncellenebilirliği
                //eventStartEditable: true,//event başlangıç zamanı düzenlenebilirliği, çizelge üzerinde kaydırılabilirliği
                //eventDurationEditable:true,//evetlerin resize özelliği
                eventDragMinDistance: 100,//event resize animasyonu
                dragRevertDuration: 1500,//event hatalı srükleme/güncelleme yapıldığında (örn takvim dışına), geri yerine oturma anim süresi
                dragScroll: true,// event sürükleme/güncelleme sırasında zaman çizelgesinde scroll özelliği otomatikleşmesi
                //eventOverlap: function (stillEvent, movingEvent) {//event kaydırmada/güncellemede uygulanacak kurallar (örn başka event ile çakışamaz)
                //    return stillEvent.allDay && movingEvenet.allDay;//eventler tam gün değillerse çakışmasına izin verme
                //},
                //eventConstraint: {// Event sürüklemede/güncellemede izin verilecek kurallar
                //    startTime: '10:00',
                //    endTime: '19:00',
                //    daysOfWeek:[1,2,3],//Haftanın 1.2. ve 3. günlerinde izin ver
                //},
                //eventllow: function (dropInfoEvent,draggedEvent) {//sürüklenen veya dışarıdan bırakılan eventin özellilkleri
                //    console.log(fropInfoEvent.start);
                //    return false;
                //},
                eventDragStart: function (info) {//Event sürükleme/güncelleme başladığında tetiklenecek fonksiyon. Başlangıç zamanı değişsede değişmese de çalışır
                    console.log('Event sürüklenmeye başladı');
                },
                eventDragStop: function (info) {//Event sürükleme/güncelleme bittiğinde tetiklenecek fonksiyon.bitiş zamanı değişsede değişmesede çalışır
                    console.log('Eventin sürüklenmesi bitti');
                },
                eventDrop: function (eventDropInfo) {//Event sürükleme/güncelleme başlayıp bittikten sonra çalışır. başlangıç ve bitiş zamanı değişmezse çalışmaz. eventDragStop'dan sonra çalışır
                    console.log('Droped, Sürüklendi');//event, oldEvent,revert(aksilik olduğunda yapılan değişiklikler geri alınır)
                    var event = {
                        Id: eventDropInfo.event.id,
                        StartDate: moment(eventDropInfo.event.start).format('DD/MM/YYYY HH:mm'),
                        EndDate: moment(eventDropInfo.event.end).format('DD/MM/YYYY HH:mm'),
                        Title: eventDropInfo.event.title,
                        Description: eventDropInfo.event.description,
                    }
                    saveEvent(event);
                },
                eventResizeStart: function (info) {//Event resize edilmeye başlandığında tetiklenecek fonksiyon.başlangıç zamanı değişsede değişmesede çalışır
                    console.log('Event Resize edilmeye başlandı');
                },
                eventResizeStop: function (info) {//Eventın resize edilmesi bittiğinde tetiklenecek fonksiyon.bitiş zamanı değişsede değişmesede çalışır
                    console.log('Eventın Resize edilmesi tamamlandı');
                },
                eventResize: function (eventResizeInfo) {//Event resize edilmeye başlanıp bittikten sonra çalışır.başlangıç ve  bitiş zamanı değişmezse çalışmaz.eventResizeStop'dan sonra çalışır
                    console.log('Resized, Boyutlandırıldı');//event, oldEvent,revert(aksilik olduğunda yapılan değişiklikler geri alınır)
                    var event = {
                        Id: eventResizeInfo.event.id,
                        StartDate: moment(eventResizeInfo.event.start).format('DD/MM/YYYY HH:mm'),
                        EndDate: moment(eventResizeInfo.event.end).format('DD/MM/YYYY HH:mm'),
                        Title: eventResizeInfo.event.title,
                        Description: eventResizeInfo.event.description,
                    }
                    saveEvent(event);
                },

                drop: function (dropInfo) {//External event sürüklendiğinde tetiklenecek fonksiyon
                    console.log("Drop edildi");
                },
                eventReceive: function (info) {//Sürüklenen External event eğer ki eventData içeriyorsa  tetiklenecek fonksiyon
                    console.log("Receive methodu tetiklendi");
                },
                eventLeave: function (info) {//Takvimler arası event sürüklendiğinde
                    console.log("Leave edildi");
                },
                //dropaccept:'#isValid',// External eventlerin id'si isValid olanlara sürüklemede izin ver
            });
            calendar.render();
            getEvents();
            $('#datetimepicker1, #datetimepicker2').datetimepicker({
                format: 'DD/MM/YYYY HH:mm',
            });

            new Draggable(draggableEl);

            function getEvents() {
                $.ajax({
                    type: 'GET',
                    url: '/event/GetEvent',
                    success: function (response) {
                        events = [];
                        var sources = calendar.getEventSources();
                        for (var i = 0; i < sources.length; i++) {
                            sources[i].remove();
                        }
                        for (var i = 0; i < response.length; i++) {
                            events.push({
                                id: response[i].id,
                                title: response[i].title,
                                start: response[i].startDate,
                                end: response[i].endDate,
                                description: response[i].description,
                            })
                        }
                        calendar.addEventSource(events);
                    },
                    error: function () {
                        $('#saveModal').modal('hide');
                        alertify.error('İşlem gerçekleşemedi..');
                    }
                })
            }

            function openAddOrUpdateModal() {
                if (selectedEvent != null) {
                    $('#eventId').val(selectedEvent.id);
                    $('#inputTitle').val(selectedEvent.title);
                    $('#inputStartDate').val(selectedEvent.start.format('DD/MM/YYYY HH:mm'));
                    $('#inputEndDate').val(selectedEvent.end.format('DD/MM/YYYY HH:mm'));
                    $('#inputDescription').val(selectedEvent.description);
                }
                $('#saveModal').modal();

            }

            function saveEvent(data) {
                $.ajax({
                    type: 'POST',
                    url: '/event/AddOrUpdateEvent',
                    data: data,
                    success: function (response) {
                        if (response == "200") {
                            getEvents();
                            $('#saveModal').modal('hide');
                            data.Id === "0" ? alertify.success('Etkinlik başarıyla eklendi..') : alertify.success('Etkinlik başarıyla güncellendi..');
                        } else {
                            alertify.warning('Ekleme/Güncelleme başarısız..');
                        }
                    },
                    error: function () {
                        $('#saveModal').modal('hide');
                        alertify.error('İşlem gerçekleşemedi..');
                    }
                })
            }

            $('#btnSave').click(function () {
                //validasyon
                if ($('#inputTitle').val() === "") {
                    alert("Etkinlik adı alanı boş bırakılamaz..");
                    return;
                }
                var event = {
                    Id: $('#eventId').val(),
                    StartDate: $('#inputStartDate').val(),
                    EndDate: $('#inputEndDate').val(),
                    Title: $('#inputTitle').val(),
                    Description: $('#inputDescription').val(),
                }
                saveEvent(event);
            })

            $('#btnUpdate').click(function () {
                $('#detailModal').modal('hide');
                openAddOrUpdateModal();
            });

            $('#btnDelete').click(function () {
                if (confirm('Etkinliği silmek istediğinize emin misiniz?')) {
                    $.ajax({
                        type: 'GET',
                        url: '/Event/DeleteEvent?id=' + selectedEvent.id,
                        success: function (response) {
                            if (response === '200') {
                                var event = calendar.getEventById(selectedEvent.id);
                                event.remove();
                                $('#detailModal').modal('hide');
                                alertify.success('Etkinlik silinmiştir.');
                            }
                        },
                        error: function () {
                            $('#detailModal').modal('hide');
                            alertify.error('Etkinlik silinirken bir problem oluştu.');
                        }
                    });
                }
            });


            ///////////Event çekme
            //var events = calendar.getEvents();
            //console.log(events);
            ////////////id'ye göre event çekme
            //var id = 'x';
            //var eventCek = calendar.getEventById(id);
            //console.log(eventCek);
            //////////event paramlarını çekme
            //var id = 'x';
            //var eventCek = calendar.getEventById(id);
            //console.log(eventCek.title);
            //////////event render etme
            ////calendar.renderEvents();

        });
    </script>
}